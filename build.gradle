/*
 * Copyright (c) 2015 Mark Platvoet<mplatvoet@gmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * THE SOFTWARE.
 */

buildscript {
    ext.kotlinVersion = '1.2.0'
    ext.extraConfVersion = '2.2.+'

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url 'http://oss.sonatype.org/content/repositories/snapshots'
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "com.netflix.nebula:gradle-extra-configurations-plugin:$extraConfVersion"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.5'
    }
}

allprojects {
    ext {
        appVersion = '3.3.0'
        appGroup = 'nl.komponents.kovenant'


        junitVersion = '4.12'

        sonatypeUsr = project.hasProperty('sonatypeUsername') ? sonatypeUsername : ''
        sonatypePwd = project.hasProperty('sonatypePassword') ? sonatypePassword : ''

        bintrayUsr = project.hasProperty('bintrayUsername') ? bintrayUsername : ''
        bintrayKey = project.hasProperty('bintrayApiKey') ? bintrayApiKey : ''
    }
}



subprojects {
    repositories {
        mavenCentral()
        maven {
            url 'http://oss.sonatype.org/content/repositories/snapshots'
        }
        maven {
            url 'https://oss.sonatype.org/content/groups/staging'
        }
    }

    def pomOnlyProject = project.name == "kovenant"

    apply plugin: 'optional-base'
    apply plugin: 'provided-base'
    apply plugin: 'kotlin'
    apply plugin: 'maven'
//    apply plugin: 'signing'
    apply plugin: 'com.jfrog.bintray'

    compileJava {
        sourceCompatibility = "1.6"
        targetCompatibility = "1.6"
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}", optional

        testCompile "junit:junit:${junitVersion}"
        testCompile "org.jetbrains.kotlin:kotlin-test:${kotlinVersion}"
    }




    if (pomOnlyProject) {
        artifacts {}
    } else {
        task javadocJar(type: Jar) {
            classifier = 'javadoc'
            from javadoc
        }

        task sourcesJar(type: Jar) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        artifacts {
            archives jar
            archives javadocJar
            archives sourcesJar
        }
//        signing {
//            sign configurations.archives
//        }

//        task releaseSub {
//            dependsOn signArchives
//        }
    }



    uploadArchives {

//        if (!pomOnlyProject) {
//            dependsOn releaseSub
//        }

        repositories.mavenDeployer {
            if (!pomOnlyProject) {
                configuration = configurations.archives
            }

            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }


            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                authentication(userName: sonatypeUsr, password: sonatypePwd)
            }

            snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
                authentication(userName: sonatypeUsr, password: sonatypePwd)
            }

            pom.whenConfigured { configgedPom ->
                configgedPom.dependencies.removeAll { dep ->
                    dep.scope == "test"
                }

                configgedPom.dependencies = configgedPom.dependencies.sort { dep ->
                    "$dep.scope:$dep.groupId:$dep.artifactId"
                }

                configgedPom.project {
                    name project.name
                    packaging(pomOnlyProject ? 'pom' : 'jar')
                    description project.description
                    url 'http://kovenant.komponents.nl'
                    inceptionYear '2015'

                    scm {
                        url 'https://github.com/mplatvoet/kovenant'
                        connection 'scm:git:git@github.com:mplatvoet/kovenant.git'
                    }

                    licenses {
                        license {
                            name 'MIT License'
                            url 'http://opensource.org/licenses/MIT'
                            distribution 'repo'
                        }
                    }

                    developers {
                        developer {
                            id 'mplatvoet'
                            name 'Mark Platvoet'
                            email 'mplatvoet@gmail.com'
                            url 'http://mplatvoet.nl'
                        }
                    }

                    issueManagement {
                        system = "YouTrack"
                        url = "http://issues.komponents.nl/youtrack/issues?q=project%3A+Kovenant"
                    }
                }
            }

        }
    }

    bintray {
        user = bintrayUsr
        key = bintrayKey
        pkg {
            repo = 'komponents'
            name = project.name
            licenses = ['MIT']
            vcsUrl = 'scm:git:git@github.com:mplatvoet/kovenant.git'

            version {
                name = appVersion
                desc = 'n/a'
                released = new Date()
            }
            publicDownloadNumbers = false
            configurations = ['archives']
        }
        publish = true
        dryRun = false
    }
}

gradle.taskGraph.whenReady { taskGraph ->
    def branchName = System.getenv('CIRCLE_BRANCH')?.trim()

    if ('master'.equals(branchName) || taskGraph.hasTask(release) || taskGraph.hasTask(bintray)) {
        allprojects*.version = appVersion
    } else {
        allprojects*.version = "$appVersion-SNAPSHOT"
    }
    allprojects*.group = appGroup
}

task jars() {
    dependsOn subprojects.findAll { it.name != 'kovenant' }.jar
    dependsOn subprojects.findAll { it.name != 'kovenant' }.sourcesJar
    dependsOn subprojects.findAll { it.name != 'kovenant' }.javadocJar
}

task release() {
    dependsOn subprojects.uploadArchives
}

task bintray {
    dependsOn subprojects.bintrayUpload
}


defaultTasks 'clean', 'jars'